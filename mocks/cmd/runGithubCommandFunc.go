// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	githubclient "github.com/moonsub-kim/crawl-data-slack/internal/pkg/githubclient"
	mock "github.com/stretchr/testify/mock"
	cli "github.com/urfave/cli/v2"

	zap "go.uber.org/zap"
)

// runGithubCommandFunc is an autogenerated mock type for the runGithubCommandFunc type
type runGithubCommandFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, logger, client
func (_m *runGithubCommandFunc) Execute(ctx *cli.Context, logger *zap.Logger, client *githubclient.Client) error {
	ret := _m.Called(ctx, logger, client)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*cli.Context, *zap.Logger, *githubclient.Client) error); ok {
		r0 = rf(ctx, logger, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newRunGithubCommandFunc creates a new instance of runGithubCommandFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newRunGithubCommandFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *runGithubCommandFunc {
	mock := &runGithubCommandFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
