// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// ArchiveFilter is an autogenerated mock type for the ArchiveFilter type
type ArchiveFilter struct {
	mock.Mock
}

// Passed provides a mock function with given fields: messages
func (_m *ArchiveFilter) Passed(messages []slack.Message) bool {
	ret := _m.Called(messages)

	if len(ret) == 0 {
		panic("no return value specified for Passed")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]slack.Message) bool); ok {
		r0 = rf(messages)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Positive provides a mock function with no fields
func (_m *ArchiveFilter) Positive() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Positive")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewArchiveFilter creates a new instance of ArchiveFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArchiveFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArchiveFilter {
	mock := &ArchiveFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
