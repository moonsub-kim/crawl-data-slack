// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	crawler "github.com/moonsub-kim/crawl-data-slack/internal/pkg/crawler"
	mock "github.com/stretchr/testify/mock"
)

// Archive is an autogenerated mock type for the Archive type
type Archive struct {
	mock.Mock
}

// CreateLabel provides a mock function with given fields: name
func (_m *Archive) CreateLabel(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CreateLabel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePost provides a mock function with given fields: post
func (_m *Archive) CreatePost(post crawler.Post) error {
	ret := _m.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(crawler.Post) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePosts provides a mock function with given fields: post
func (_m *Archive) CreatePosts(post []crawler.Post) error {
	ret := _m.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePosts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]crawler.Post) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListLabels provides a mock function with no fields
func (_m *Archive) ListLabels() (map[string]struct{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListLabels")
	}

	var r0 map[string]struct{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]struct{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncLabels provides a mock function with given fields: labels
func (_m *Archive) SyncLabels(labels []string) error {
	ret := _m.Called(labels)

	if len(ret) == 0 {
		panic("no return value specified for SyncLabels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewArchive creates a new instance of Archive. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArchive(t interface {
	mock.TestingT
	Cleanup(func())
}) *Archive {
	mock := &Archive{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
