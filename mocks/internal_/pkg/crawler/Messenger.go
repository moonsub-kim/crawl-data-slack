// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	crawler "github.com/moonsub-kim/crawl-data-slack/internal/pkg/crawler"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Messenger is an autogenerated mock type for the Messenger type
type Messenger struct {
	mock.Mock
}

// ArchivePosts provides a mock function with given fields: channel, fromDate, toDate
func (_m *Messenger) ArchivePosts(channel crawler.Channel, fromDate time.Time, toDate time.Time) ([]crawler.Post, error) {
	ret := _m.Called(channel, fromDate, toDate)

	if len(ret) == 0 {
		panic("no return value specified for ArchivePosts")
	}

	var r0 []crawler.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(crawler.Channel, time.Time, time.Time) ([]crawler.Post, error)); ok {
		return rf(channel, fromDate, toDate)
	}
	if rf, ok := ret.Get(0).(func(crawler.Channel, time.Time, time.Time) []crawler.Post); ok {
		r0 = rf(channel, fromDate, toDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]crawler.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(crawler.Channel, time.Time, time.Time) error); ok {
		r1 = rf(channel, fromDate, toDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannels provides a mock function with no fields
func (_m *Messenger) GetChannels() ([]crawler.Channel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChannels")
	}

	var r0 []crawler.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]crawler.Channel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []crawler.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]crawler.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLabels provides a mock function with no fields
func (_m *Messenger) GetLabels() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Notify provides a mock function with given fields: e
func (_m *Messenger) Notify(e crawler.Notification) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(crawler.Notification) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessenger creates a new instance of Messenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Messenger {
	mock := &Messenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
