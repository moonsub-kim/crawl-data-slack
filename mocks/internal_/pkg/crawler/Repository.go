// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	crawler "github.com/moonsub-kim/crawl-data-slack/internal/pkg/crawler"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetChannel provides a mock function with given fields: userName
func (_m *Repository) GetChannel(userName string) (crawler.Channel, error) {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for GetChannel")
	}

	var r0 crawler.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (crawler.Channel, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) crawler.Channel); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Get(0).(crawler.Channel)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEvent provides a mock function with given fields: event
func (_m *Repository) SaveEvent(event crawler.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for SaveEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(crawler.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncChannels provides a mock function with given fields: users
func (_m *Repository) SyncChannels(users []crawler.Channel) error {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for SyncChannels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]crawler.Channel) error); ok {
		r0 = rf(users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
