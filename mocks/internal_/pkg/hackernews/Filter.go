// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

// Filter provides a mock function with given fields: subText
func (_m *Filter) Filter(subText string) bool {
	ret := _m.Called(subText)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(subText)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Reason provides a mock function with no fields
func (_m *Filter) Reason() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reason")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *Filter) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewFilter creates a new instance of Filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Filter {
	mock := &Filter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
