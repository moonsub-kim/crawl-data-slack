// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	gofeed "github.com/mmcdole/gofeed"
	mock "github.com/stretchr/testify/mock"
)

// Transformer is an autogenerated mock type for the Transformer type
type Transformer struct {
	mock.Mock
}

// Reason provides a mock function with no fields
func (_m *Transformer) Reason() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reason")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *Transformer) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Transform provides a mock function with given fields: item
func (_m *Transformer) Transform(item *gofeed.Item) *gofeed.Item {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Transform")
	}

	var r0 *gofeed.Item
	if rf, ok := ret.Get(0).(func(*gofeed.Item) *gofeed.Item); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gofeed.Item)
		}
	}

	return r0
}

// NewTransformer creates a new instance of Transformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transformer {
	mock := &Transformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
